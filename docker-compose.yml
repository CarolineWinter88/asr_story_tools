version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: asr_story_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-asr_story_2025}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-asr_story}
      MYSQL_USER: ${MYSQL_USER:-asr_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-asr_pass_2025}
      TZ: Asia/Shanghai
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./backend/migrations:/docker-entrypoint-initdb.d
    networks:
      - asr_story_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI后端
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: asr_story_backend
    restart: unless-stopped
    environment:
      # 数据库配置
      DATABASE_URL: mysql+pymysql://${MYSQL_USER:-asr_user}:${MYSQL_PASSWORD:-asr_pass_2025}@mysql:3306/${MYSQL_DATABASE:-asr_story}
      # 应用配置
      APP_ENV: ${APP_ENV:-production}
      DEBUG: ${DEBUG:-false}
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      # CORS配置
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost,http://localhost:3000,http://localhost:5173}
      # 文件存储配置
      UPLOAD_DIR: /app/storage/uploads
      AUDIO_DIR: /app/storage/audio
      TEMP_DIR: /app/storage/temp
      # TTS配置（预留）
      TTS_ENGINE: ${TTS_ENGINE:-azure}
      TTS_API_KEY: ${TTS_API_KEY:-}
      TTS_REGION: ${TTS_REGION:-}
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - ./storage:/app/storage
      - ./backend/app:/app/app  # 开发模式：代码热重载
    networks:
      - asr_story_network
    depends_on:
      mysql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Vue3前端
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_BASE_URL: ${VITE_API_BASE_URL:-http://localhost:8000}
    container_name: asr_story_frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-80}:80"
    networks:
      - asr_story_network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx反向代理（可选，用于生产环境）
  nginx:
    image: nginx:alpine
    container_name: asr_story_nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-8080}:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./storage:/usr/share/nginx/html/storage:ro  # 静态文件访问
    networks:
      - asr_story_network
    depends_on:
      - backend
      - frontend
    profiles:
      - production  # 仅在生产模式下启动

networks:
  asr_story_network:
    driver: bridge

volumes:
  mysql_data:
    driver: local

